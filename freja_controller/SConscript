#******************************************************************
#
# Copyright 2015 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# 'service' sub-project main build script
#
##

Import('env')

if env.get('RELEASE'):
    env.AppendUnique(CCFLAGS = ['-Os'])
    env.AppendUnique(CPPDEFINES = ['NDEBUG'])
else:
    env.AppendUnique(CCFLAGS = ['-g'])


lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')
controller_env = lib_env.Clone()

target_os = env.get('TARGET_OS')
######################################################################
# Build flags
######################################################################
#controller_env.AppendUnique(CPPPATH = ['../extlibs/cjson'])
#controller_env.AppendUnique(CPPPATH = ['../resource/csdk/connectivity/api'])
controller_env.AppendUnique(CPPPATH = ['include'])
controller_env.AppendUnique(CPPPATH = ['../service/resource-encapsulation/include'])
controller_env.AppendUnique(CPPPATH = ['../service/resource-encapsulation/src/common/primitiveResource/include'])
controller_env.AppendUnique(CPPPATH = ['../service/resource-encapsulation/src/common/expiryTimer/include'])
controller_env.AppendUnique(CPPPATH = ['../service/resource-hosting/src'])
controller_env.AppendUnique(CPPPATH = ['../service/scene-manager/include', '../scene_manager/src'])
controller_env.AppendUnique(CPPPATH = ['../resource/include'])
controller_env.AppendUnique(CPPPATH = ['../resource/csdk/stack/include']),
controller_env.AppendUnique(CPPPATH = ['../service/things-manager/sdk/inc']),
controller_env.AppendUnique(CPPPATH = ['../service/things-manager/sdk/src'])
controller_env.AppendUnique(CPPPATH = ['../service/things-manager/sdk/inc']),
controller_env.AppendUnique(CPPPATH = ['../service/things-manager/sampleapp/linux/configuration/'])
controller_env.AppendUnique(CPPPATH = ['../service/resource-hosting/include'])
controller_env.AppendUnique(CPPPATH = ['../service/resource-hosting/src'])
controller_env.AppendUnique(CPPPATH = ['../extlibs/timer'])

# RD
controller_env.AppendUnique(CPPPATH = ['../service/resource-directory/include'])


controller_env.AppendUnique(LIBS = [
    'scene_manager',
    'resource_hosting',
    'rcs_client',
    'rcs_server',
    'rcs_common',
    'oc',
    'octbstack',
    'oc_logger',
    'connectivity_abstraction',
    'libcoap',
    'libTGMSDKLibrary',
    'dl',
    'resource_hosting'
    ])

controller_env.PrependUnique(LIBS = 'resource_directory')

if env.get('SECURED') == '1':
    controller_env.AppendUnique(LIBS = ['tinydtls'])
if 'rt' in controller_env.get('LIBS'):
    controller_env.Append(LIBS = ['rt'])

if target_os not in ['windows', 'winrt']:
	controller_env.AppendUnique(CXXFLAGS = ['-O2', '-g', '-Wall', '-fmessage-length=0', '-std=c++0x', '-Wno-error'])

if target_os not in ['darwin', 'ios', 'windows', 'winrt']:
	controller_env.AppendUnique(LINKFLAGS = ['-Wl,--no-undefined'])

if target_os == 'linux':
	controller_env.AppendUnique(LIBS = ['pthread'])

if target_os == 'android':
	controller_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
	controller_env.AppendUnique(LIBS = ['gnustl_shared','log'])

	if not env.get('RELEASE'):
		controller_env.AppendUnique(LIBS = ['log'])

if not env.get('RELEASE'):
    controller_env.PrependUnique(LIBS = ['gcov'])
    controller_env.AppendUnique(CXXFLAGS = ['--coverage'])

####################################################################
# Source files and Targets
######################################################################
controller_src = [
	'src/Controller.cpp',
	'src/ResourceObject.cpp',
	'src/DiscoveryManager.cpp',
	'src/ConfigurationCollection.cpp'
	]

Controller_Static = controller_env.StaticLibrary('controller', controller_src)
Controller_Shared = controller_env.SharedLibrary('controller', controller_src)

controller_env.InstallTarget([Controller_Static, Controller_Shared], 'libcontroller')
controller_env.UserInstallTargetLib([Controller_Static, Controller_Shared], 'libcontroller')

#mprichserver = controller_env.Program('controller', 'src/Controller.cpp')

######################################################################
# Program
######################################################################
SConscript('program/SConscript')



	
