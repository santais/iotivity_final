#include "RPIBeerPongController.h"


RPIBeerPongController::RPIBeerPongController()
{
    // Initialize the vectors
    std::for_each(m_redSideResources.begin(), m_redSideResources.end(), [](PCA9685LEDResource::Ptr &resource)
        {resource = nullptr;});

    std::for_each(m_blueSideResources.begin(), m_blueSideResources.end(), [](PCA9685LEDResource::Ptr &resource)
        {resource = nullptr;});

    // Initialize the PCA9685 module
    PCA9685Setup(I2CADDRESS_BLUE_1, I2C_FREQUENCY_HZ);

    // Initialize the cup resources
    this->initializeCupResources();

    // Initialize the 7 segment resources
    this->initializeSegmentResources();

    // Setup the Segment7 Controller callback
    Callback<void(Segment7* )>::func = std::bind(&RPIBeerPongController::segmentCallback, this, std::placeholders::_1);
    SegmentValueCallback func = static_cast<SegmentValueCallback>(Callback<void(Segment7*)>::callback);

    if(segment7Setup(NUM_OF_SEGMENT_PAIRS, func) < 0)
    {
        std::cerr << "Failed to setup the 7segment driver" << std::endl;
        return;
    }


    // Start and store the linked list
    m_segmentController = getSegment7List();

    // Start the segment
    startSegment7();
}

RPIBeerPongController* RPIBeerPongController::getInstance()
{
    static RPIBeerPongController* instance(new RPIBeerPongController);
    return instance;
}

RPIBeerPongController::~RPIBeerPongController()
{
    ;
}


/**
 * @brief Initializes the NUM_OF_SIDE_RESOURCES * 2 cup resources
 */
void RPIBeerPongController::initializeCupResources()
{
    // 10 cups are to be initialized = 10 RPi resources.
    /*  Cups setup - ID */
    /* 9  8  7  6 */
    /*  5  4   3  */
    /*   2   1    */
    /*     0      */


    // A maximum of 5 cups are possible per PCA9865 Module.
    // Requires a total of 2 modules per side
    int waterCupPins = 0;
    std::stringstream waterStringStream;

    // BLUE SIDE
    for(size_t i = 0; i < 5; i++)
    {
        std::stringstream ss;
        ss << "/pcablue/led/" << i;
        PCA9685LEDResource::Ptr resource = std::make_shared<PCA9685LEDResource>(ss.str(), I2CADDRESS_BLUE_1, I2C_FREQUENCY_HZ);
        resource->createResource(i*3, (i*3) + 1, (i*3) + 2);
        std::cout << "Created resource with uri : " << ss.str() << " and pins: " <<
                     i*3 << " " << (i*3) + 1 << " " << (i*3) + 2 << std::endl;

        m_blueSideResources[i] = resource;
    }

    for(size_t i = 0; i < 5; i++)
    {
        std::stringstream ss;
        ss << "/pcablue/led/" << i + 5;
        PCA9685LEDResource::Ptr resource = std::make_shared<PCA9685LEDResource>(ss.str(), I2CADDRESS_BLUE_2, I2C_FREQUENCY_HZ);
        resource->createResource(i*3, (i*3) + 1, (i*3) + 2);
        std::cout << "Created resource with uri : " << ss.str() << " and pins: " <<
                     i*3 << " " << (i*3) + 1 << " " << (i*3) + 2 << std::endl;

        m_blueSideResources[i + 5] = resource;
    }

    // Water Resource
    waterStringStream << "/pcablue/led/" << NUM_OF_SIDE_RESOURCES;
    PCA9685LEDResource::Ptr resource = std::make_shared<PCA9685LEDResource>(waterStringStream.str(), I2CADDRESS_BLUE_3, I2C_FREQUENCY_HZ);
    resource->createResource(waterCupPins++, waterCupPins++, waterCupPins++);
    m_blueSideResources[NUM_OF_SIDE_RESOURCES - 1] = resource;

    // RED SIDE
    for(size_t i = 0; i < 5; i++)
    {
        std::stringstream ss;
        ss << "/pcared/led/" << i;
        PCA9685LEDResource::Ptr resource = std::make_shared<PCA9685LEDResource>(ss.str(), I2CADDRESS_RED_1, I2C_FREQUENCY_HZ);
        resource->createResource(i*3, (i*3) + 1, (i*3) + 2);
        std::cout << "Created resource with uri : " << ss.str() << " and pins: " <<
                     i*3 << " " << (i*3) + 1 << " " << (i*3) + 2 << std::endl;

        m_redSideResources[i] = resource;
    }

    for(size_t i = 0; i < 5; i++)
    {
        std::stringstream ss;
        ss << "/pcared/led/" << i + 5;
        PCA9685LEDResource::Ptr resource = std::make_shared<PCA9685LEDResource>(ss.str(), I2CADDRESS_RED_2, I2C_FREQUENCY_HZ);
        resource->createResource(i*3, (i*3) + 1, (i*3) + 2);
        std::cout << "Created resource with uri : " << ss.str() << " and pins: " <<
                     i*3 << " " << (i*3) + 1 << " " << (i*3) + 2 << std::endl;

        m_redSideResources[i + 5] = resource;
    }


    // Water Resource
    waterStringStream.str(std::string());
    waterStringStream.clear();
    waterStringStream << "/pcared/led/" << NUM_OF_SIDE_RESOURCES;
    resource = std::make_shared<PCA9685LEDResource>(waterStringStream.str(), I2CADDRESS_BLUE_3, I2C_FREQUENCY_HZ);
    resource->createResource(waterCupPins++, waterCupPins++, waterCupPins++);
    m_redSideResources[NUM_OF_SIDE_RESOURCES - 1] = resource;

}

/**
 * @brief Initializes the NUM_OF_SEGMENT_PAIRS resources
 */
void RPIBeerPongController::initializeSegmentResources()
{
    for(int i = 0; i < NUM_OF_SEGMENT_PAIRS; i++)
    {
        std::stringstream ss;
        ss << "/segment/" << i;
        RPI7SegmentResource::Ptr resource = std::make_shared<RPI7SegmentResource>(ss.str(), i);
        resource->createResource();
        m_7SegmentResources[i] = resource;
    }
}

/**
 * @brief Callback initiated when a change to one of the input
 *        sensors are registered and the segment value is changed
 *
 * @param segment   The segment which has changed its value
 */
void RPIBeerPongController::segmentCallback(Segment7* segment)
{
    int id = static_cast<int>(segment->id);
    int value = static_cast<int>(segment->value);

    std::cout << __func__ << std::endl;

    if(segment == NULL)
    {
        std::cerr << "Segment is null! returning" << std::endl;
        return;
    }

    std::cout << "Before id check" << std::endl;
    if(segment->id > NUM_OF_SEGMENT_PAIRS)
    {
        std::cout << "Unknown id" << std::endl;
        return;
    }

    std::cout << "Id: " << id << " " << "Value: " << value << std::endl;

    RPI7SegmentResource::Ptr resource = m_7SegmentResources[id];

    if(resource == nullptr)
    {
        std::cerr << "The found resource is a nullptr" << std::endl;
        return;
    }

    std::cout << "Setting value of resource: " << resource->getUri() << " with id: " <<
                 resource->getSegmentID() << " to value of: " << value << std::endl;

    resource->setSegmentValue(value);


}

/*
void RPIBeerPongController::staticCallback(Segment7* segment)
{
    // Get the object
    std::cout << __func__ << std::endl;
    std::cout << "Segment id: " << segment->id << std::endl;
    RPIBeerPongController* obj = RPIBeerPongController::getInstance();

    std::cout << "Calling obj segmentcallback func" << std::endl;
    obj->segmentCallback(segment);
}
*/
